/*
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.graphhopper.directions.api.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.graphhopper.directions.api.client.model.Activity;
import com.graphhopper.directions.api.client.model.RoutePoint;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Route
 */

public class Route {
  @SerializedName("vehicle_id")
  private String vehicleId = null;

  @SerializedName("distance")
  private Long distance = null;

  @SerializedName("transport_time")
  private Long transportTime = null;

  @SerializedName("completion_time")
  private Long completionTime = null;

  @SerializedName("waiting_time")
  private Long waitingTime = null;

  @SerializedName("activities")
  private List<Activity> activities = new ArrayList<Activity>();

  @SerializedName("points")
  private List<RoutePoint> points = new ArrayList<RoutePoint>();

  public Route vehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
    return this;
  }

   /**
   * id of vehicle that operates route
   * @return vehicleId
  **/
  @ApiModelProperty(example = "null", value = "id of vehicle that operates route")
  public String getVehicleId() {
    return vehicleId;
  }

  public void setVehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
  }

  public Route distance(Long distance) {
    this.distance = distance;
    return this;
  }

   /**
   * distance of route in meter
   * @return distance
  **/
  @ApiModelProperty(example = "null", value = "distance of route in meter")
  public Long getDistance() {
    return distance;
  }

  public void setDistance(Long distance) {
    this.distance = distance;
  }

  public Route transportTime(Long transportTime) {
    this.transportTime = transportTime;
    return this;
  }

   /**
   * transport time of route in ms
   * @return transportTime
  **/
  @ApiModelProperty(example = "null", value = "transport time of route in ms")
  public Long getTransportTime() {
    return transportTime;
  }

  public void setTransportTime(Long transportTime) {
    this.transportTime = transportTime;
  }

  public Route completionTime(Long completionTime) {
    this.completionTime = completionTime;
    return this;
  }

   /**
   * completion time of route in ms
   * @return completionTime
  **/
  @ApiModelProperty(example = "null", value = "completion time of route in ms")
  public Long getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(Long completionTime) {
    this.completionTime = completionTime;
  }

  public Route waitingTime(Long waitingTime) {
    this.waitingTime = waitingTime;
    return this;
  }

   /**
   * waiting time of route in ms
   * @return waitingTime
  **/
  @ApiModelProperty(example = "null", value = "waiting time of route in ms")
  public Long getWaitingTime() {
    return waitingTime;
  }

  public void setWaitingTime(Long waitingTime) {
    this.waitingTime = waitingTime;
  }

  public Route activities(List<Activity> activities) {
    this.activities = activities;
    return this;
  }

  public Route addActivitiesItem(Activity activitiesItem) {
    this.activities.add(activitiesItem);
    return this;
  }

   /**
   * array of activities
   * @return activities
  **/
  @ApiModelProperty(example = "null", value = "array of activities")
  public List<Activity> getActivities() {
    return activities;
  }

  public void setActivities(List<Activity> activities) {
    this.activities = activities;
  }

  public Route points(List<RoutePoint> points) {
    this.points = points;
    return this;
  }

  public Route addPointsItem(RoutePoint pointsItem) {
    this.points.add(pointsItem);
    return this;
  }

   /**
   * array of route planning points
   * @return points
  **/
  @ApiModelProperty(example = "null", value = "array of route planning points")
  public List<RoutePoint> getPoints() {
    return points;
  }

  public void setPoints(List<RoutePoint> points) {
    this.points = points;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Route route = (Route) o;
    return Objects.equals(this.vehicleId, route.vehicleId) &&
        Objects.equals(this.distance, route.distance) &&
        Objects.equals(this.transportTime, route.transportTime) &&
        Objects.equals(this.completionTime, route.completionTime) &&
        Objects.equals(this.waitingTime, route.waitingTime) &&
        Objects.equals(this.activities, route.activities) &&
        Objects.equals(this.points, route.points);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vehicleId, distance, transportTime, completionTime, waitingTime, activities, points);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Route {\n");
    
    sb.append("    vehicleId: ").append(toIndentedString(vehicleId)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    transportTime: ").append(toIndentedString(transportTime)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    waitingTime: ").append(toIndentedString(waitingTime)).append("\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

