/*
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.graphhopper.directions.api.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.graphhopper.directions.api.client.model.ResponseInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * MatrixResponse
 */

public class MatrixResponse {
  @SerializedName("distances")
  private List<List<BigDecimal>> distances = new ArrayList<List<BigDecimal>>();

  @SerializedName("times")
  private List<List<BigDecimal>> times = new ArrayList<List<BigDecimal>>();

  @SerializedName("weights")
  private List<List<Double>> weights = new ArrayList<List<Double>>();

  @SerializedName("info")
  private ResponseInfo info = null;

  public MatrixResponse distances(List<List<BigDecimal>> distances) {
    this.distances = distances;
    return this;
  }

  public MatrixResponse addDistancesItem(List<BigDecimal> distancesItem) {
    this.distances.add(distancesItem);
    return this;
  }

   /**
   * Get distances
   * @return distances
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<List<BigDecimal>> getDistances() {
    return distances;
  }

  public void setDistances(List<List<BigDecimal>> distances) {
    this.distances = distances;
  }

  public MatrixResponse times(List<List<BigDecimal>> times) {
    this.times = times;
    return this;
  }

  public MatrixResponse addTimesItem(List<BigDecimal> timesItem) {
    this.times.add(timesItem);
    return this;
  }

   /**
   * Get times
   * @return times
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<List<BigDecimal>> getTimes() {
    return times;
  }

  public void setTimes(List<List<BigDecimal>> times) {
    this.times = times;
  }

  public MatrixResponse weights(List<List<Double>> weights) {
    this.weights = weights;
    return this;
  }

  public MatrixResponse addWeightsItem(List<Double> weightsItem) {
    this.weights.add(weightsItem);
    return this;
  }

   /**
   * Get weights
   * @return weights
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<List<Double>> getWeights() {
    return weights;
  }

  public void setWeights(List<List<Double>> weights) {
    this.weights = weights;
  }

  public MatrixResponse info(ResponseInfo info) {
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @ApiModelProperty(example = "null", value = "")
  public ResponseInfo getInfo() {
    return info;
  }

  public void setInfo(ResponseInfo info) {
    this.info = info;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatrixResponse matrixResponse = (MatrixResponse) o;
    return Objects.equals(this.distances, matrixResponse.distances) &&
        Objects.equals(this.times, matrixResponse.times) &&
        Objects.equals(this.weights, matrixResponse.weights) &&
        Objects.equals(this.info, matrixResponse.info);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distances, times, weights, info);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatrixResponse {\n");
    
    sb.append("    distances: ").append(toIndentedString(distances)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("    weights: ").append(toIndentedString(weights)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

