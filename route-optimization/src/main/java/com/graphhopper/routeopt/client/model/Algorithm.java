/**
 * Route Optimization API
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.graphhopper.routeopt.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Algorithm
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-09-22T09:15:07.913+02:00")
public class Algorithm   {
  /**
   * Gets or Sets problemType
   */
  public enum ProblemTypeEnum {
    @SerializedName("min")
    MIN("min"),
    
    @SerializedName("min-max")
    MIN_MAX("min-max");

    private String value;

    ProblemTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("problem_type")
  private ProblemTypeEnum problemType = null;

  /**
   * Gets or Sets objective
   */
  public enum ObjectiveEnum {
    @SerializedName("transport_time")
    TRANSPORT_TIME("transport_time"),
    
    @SerializedName("completion_time")
    COMPLETION_TIME("completion_time");

    private String value;

    ObjectiveEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("objective")
  private ObjectiveEnum objective = null;

  public Algorithm problemType(ProblemTypeEnum problemType) {
    this.problemType = problemType;
    return this;
  }

   /**
   * Get problemType
   * @return problemType
  **/
  @ApiModelProperty(example = "null", value = "")
  public ProblemTypeEnum getProblemType() {
    return problemType;
  }

  public void setProblemType(ProblemTypeEnum problemType) {
    this.problemType = problemType;
  }

  public Algorithm objective(ObjectiveEnum objective) {
    this.objective = objective;
    return this;
  }

   /**
   * Get objective
   * @return objective
  **/
  @ApiModelProperty(example = "null", value = "")
  public ObjectiveEnum getObjective() {
    return objective;
  }

  public void setObjective(ObjectiveEnum objective) {
    this.objective = objective;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Algorithm algorithm = (Algorithm) o;
    return Objects.equals(this.problemType, algorithm.problemType) &&
        Objects.equals(this.objective, algorithm.objective);
  }

  @Override
  public int hashCode() {
    return Objects.hash(problemType, objective);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Algorithm {\n");
    
    sb.append("    problemType: ").append(toIndentedString(problemType)).append("\n");
    sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

